{"name":"RestfulProtobuf","tagline":"High performant REST service","body":"# RestfulProtobuf\r\nThis is a Prototype for a standalone WAR. It offers a Restful service using Jersey/JAX-RS (JSR 311) and Google Protocol Buffers (protobuf).\r\n\r\nMy project is a feasibility study and is **NOT PRODUCTION READY**.\r\n\r\n# Prerequisites\r\n- [`Maven 3.3.3`](http://maven.apache.org/)\r\n- [`Protoc 3.0.0-alpha-3`](https://github.com/google/protobuf/releases)\r\n- [`Oracle JDK 1.8.0_45`](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)\r\n\r\n# Quickstart\r\nTo enjoy the simplicity, you only have to execute three steps:\r\n\r\n1. Clone Project from GitHub `git clone https://github.com/sam6-de/RestfulProtobuf.git`\r\n2. Build Project using Maven `cd ./RestfulProtobuf/ && mvn clean install`\r\n3. Start embedded Jetty `cd ./RestWebapp/target/ && java -jar RestWebapp-1.0-SNAPSHOT.war`\r\n\r\nNow the service is up and running using port `8080`. Simply connect via browser, for example by using [http://localhost:8080/rest/hello/world](http://localhost:8080/rest/hello/world)\r\n\r\nJersey automatically generates a `WADL` file which describes all valid operations: [http://localhost:8080/rest/application.wadl](http://localhost:8080/rest/application.wadl).\r\nThis is simplified WADL with user and core resources only. To get full WADL with extended resources use the query parameter detail: [http://localhost:8080/rest/application.wadl?detail=true](http://localhost:8080/rest/application.wadl?detail=true)\r\n\r\n# Build from scratch\r\n## Preparation\r\nIf you want to set up your Maven project as multi module project, you should first create a root `pom.xml`-file.\r\n\r\n    mvn archetype:generate \\\r\n        -DarchetypeGroupId=org.codehaus.mojo.archetypes \\\r\n        -DarchetypeArtifactId=pom-root \\\r\n        -DarchetypeVersion=RELEASE \\\r\n        -DgroupId=de.sam6.demo \\\r\n        -DartifactId=RestfulProtobuf \\\r\n        -DinteractiveMode=false\r\nIn order to create a new/first submodule in the project, change the directory and use the Maven webapp archetype, that will create (most of) necessary folders and files:\r\n\r\n    cd RestfulProtobuf/\r\n    mvn archetype:generate \\\r\n        -DarchetypeArtifactId=maven-archetype-webapp \\\r\n        -DgroupId=de.sam6.demo \\\r\n        -DartifactId=RestWebapp \\\r\n        -DinteractiveMode=false\r\nBecause the `java` source folder is not created automatically, we have to do this manually:\r\n\r\n    mkdir RestWebapp/src/main/java\r\n\r\nNow you can import the whole multi-module-project into your favourite IDE.\r\n\r\n## Dependencies\r\n    <dependency>\r\n        <groupId>com.sun.jersey</groupId>\r\n        <artifactId>jersey-server</artifactId>\r\n        <version>1.19</version>\r\n    </dependency>","google":"UA-19494904-3","note":"Don't delete this file! It's used internally to help with page regeneration."}